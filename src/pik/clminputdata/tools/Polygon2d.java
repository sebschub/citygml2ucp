/**
 * 
 */
package pik.clminputdata.tools;

import javax.vecmath.Point2d;


/**
 * A 2d polygon based on {@link javax.vecmath.Point2d Point2d}.
 * 
 * @author Sebastian Schubert
 * 
 */
public class Polygon2d extends ClosedSurface<Point2d>{

	private double[] xcoord, ycoord;

	/**
	 * SUID generated by eclipse.
	 */
	private static final long serialVersionUID = 1275895460208834376L;

	public Polygon2d(double[] x, double[] y) {
		if (x.length!=y.length) {
			throw new IllegalArgumentException("x and y arrays have to be of the same size.");
		}
		this.xcoord = x;
		this.ycoord = y;
	}

	
	@Override
	protected double calcArea() {
		double area = 0;
		for (int i = 0; i < xcoord.length - 1; i++) {
			area += (xcoord[i] * ycoord[i + 1])
					- (xcoord[i + 1] * ycoord[i]);
		}
		return 0.5 * Math.abs(area);
	}

	@Override
	protected Point2d calcCentroid() {
		double x = 0, y = 0;
		double iarea;
		iarea = 1. / (6. * getArea());

		for (int i = 0; i < xcoord.length - 1; i++) {
			x += (xcoord[i] + xcoord[i + 1])
					* (xcoord[i] * ycoord[i + 1] - xcoord[i + 1]
							* ycoord[i]);
			y += (ycoord[i] + ycoord[i + 1])
					* (xcoord[i] * ycoord[i + 1] - xcoord[i + 1]
							* ycoord[i]);
		}

		x *= iarea;
		y *= iarea;

		return new Point2d(x,y);
	}


	public boolean contains(double x, double y) {
		int hits = 0;

		double lastx = xcoord[xcoord.length - 1];
		double lasty = ycoord[xcoord.length - 1];
		double curx, cury;

		// Walk the edges of the polygon
		for (int i = 0; i < xcoord.length; lastx = curx, lasty = cury, i++) {
			curx = xcoord[i];
			cury = ycoord[i];

			if (cury == lasty) {
				continue;
			}

			double leftx;
			if (curx < lastx) {
				if (x >= lastx) {
					continue;
				}
				leftx = curx;
			} else {
				if (x >= curx) {
					continue;
				}
				leftx = lastx;
			}

			double test1, test2;
			if (cury < lasty) {
				if (y < cury || y >= lasty) {
					continue;
				}
				if (x < leftx) {
					hits++;
					continue;
				}
				test1 = x - curx;
				test2 = y - cury;
			} else {
				if (y < lasty || y >= cury) {
					continue;
				}
				if (x < leftx) {
					hits++;
					continue;
				}
				test1 = x - lastx;
				test2 = y - lasty;
			}

			if (test1 < (test2 / (lasty - cury) * (lastx - curx))) {
				hits++;
			}
		}

		return ((hits & 1) != 0);
	}

}
