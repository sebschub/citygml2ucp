package pik.clminputdata.tools;

import java.util.List;
import java.util.Properties;

/**
 * Properties with input routines for different variable types and a generalized
 * set routine.
 * 
 * @author Sebastian Schubert
 * 
 */
public class PropertiesEnh extends Properties {


	/**
	 * SUID generated by eclipse 
	 */
	private static final long serialVersionUID = -1595761753037640465L;

	private List<String> items, values;
	private boolean  fillLists = false;
	
	/**
	 * Constructor which also gets String lists to fill with the read data
	 * @param items List which will include the read item strings
	 * @param values List which will include the read value strings
	 */
	public PropertiesEnh(List<String> items, List<String> values) {
		this.items = items;
		this.values = values;
		fillLists = true;
	}

	
	/**
	 * Empty Constructor
	 */
	public PropertiesEnh() {
//		nothing to do
	}

	/**
	 * Get a single boolean from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The boolean
	 */
	public boolean getBoolean(String key, boolean defaultValue) {
		String str = getProperty(key);
		boolean rv;
		if (str == null) {
			rv = defaultValue;
		} else {
			rv = Boolean.parseBoolean(str.trim());
		}
		if (fillLists) {
			items.add(key);
			values.add(String.valueOf(rv));
		}
		return rv;
	}
	
	/**
	 * Get a single integer from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The int
	 */
	public int getInt(String key, int defaultValue) {
		String str = getProperty(key);
		int rv;
		if (str == null) {
			rv = defaultValue;
		} else {
			rv = Integer.parseInt(str.trim());
		}
		if (fillLists) {
			items.add(key);
			values.add(String.valueOf(rv));
		}
		return rv;
	}

	/**
	 * Get a single double from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The double
	 */
	public double getDouble(String key, double defaultValue) {
		String str = getProperty(key);
		double rv;
		if (str == null) {
			rv = defaultValue;
		} else {
			rv = Double.parseDouble(str.trim());
		}
		if (fillLists) {
			items.add(key);
			values.add(String.valueOf(rv));
		}
		return rv;
	}

	/**
	 * Get an array of doubles from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The double array
	 */
	public double[] getDoubleArray(String key, double[] defaultValue) {
		String str = getProperty(key);
		double[] rv;
		if (str == null) {
			rv = defaultValue;
		} else {
			str = str.trim();
			String[] temp = str.split(",");
			
			rv = new double[temp.length];
			for (int i = 0; i < rv.length; i++) {
				rv[i] = Double.valueOf(temp[i]);
			}
		}
		if (fillLists) {
			StringBuilder strOut = new StringBuilder();
			for (int i = 0; i < rv.length-1; i++) {
				strOut.append(rv[i]+", ");
			}
			strOut.append(rv[rv.length-1]);
			items.add(key);
			values.add(strOut.toString());
		}
		return rv;
	}

	/**
	 * Get an array of integers from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The integer array
	 */
	public int[] getIntArray(String key, int[] defaultValue) {
		String str = getProperty(key);
		int[] rv;
		if (str == null) {
			rv = defaultValue;
		} else {
			str = str.trim();
			String[] temp = str.split(",");
			
			rv = new int[temp.length];
			for (int i = 0; i < rv.length; i++) {
				rv[i] = Integer.valueOf(temp[i]);
			}
		}
		if (fillLists) {
			StringBuilder strOut = new StringBuilder();
			for (int i = 0; i < rv.length-1; i++) {
				strOut.append(rv[i]+", ");
			}
			strOut.append(rv[rv.length-1]);
			items.add(key);
			values.add(strOut.toString());
		}
		return rv;
	}

	/**
	 * Get a string from properties.
	 * 
	 * @param key
	 *            String to look for
	 * @param defaultValue
	 *            If key not found, return this
	 * @return The string
	 */
	public String getString(String key, String defaultValue) {
		String rv = getProperty(key, defaultValue).trim();
		if (fillLists) {
			items.add(key);
			values.add(rv);
		}
		return rv;
	}

	/**
	 * Set a property.
	 * 
	 * @param name
	 *            String of the property
	 * @param var
	 *            Object to put into property
	 */
	public void setProperty(String name, Object var) {
		setProperty(name, var.toString());
	}

}
